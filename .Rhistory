top_predictions <- tibble(word = "and", score = alpha^iteration)
}
if(nrow(top_predictions) == 0){
backoff_ngram <- text_to_predict[-1]
stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
top_predictions
}
prediction_algo(words, alpha, quad_fast, tri_fast, bi_fast)
stupidBO(list_words2, alpha, quad_fast, tri_fast, bi_fast)
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(len == 0){
}
if(nrow(top_predictions) == 0){
if(len == 1){
top_predictions <- tibble(word = "and", score = alpha^iteration)
}
else{
backoff_ngram <- text_to_predict[-1]
stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
}
top_predictions
}
stupidBO(list_words2, alpha, quad_fast, tri_fast, bi_fast)
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(len == 0){
}
if(nrow(top_predictions) == 0){
if(len == 1){
top_predictions <- tibble(word = "and", score = alpha^iteration)
}
else{
backoff_ngram <- text_to_predict[-1]
stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
}
top_predictions
}
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(nrow(top_predictions) == 0){
if(len == 1){
top_predictions <- tibble(word = "and", score = alpha^iteration)
}
else{
backoff_ngram <- text_to_predict[-1]
stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
}
stupidBO(list_words2, alpha, quad_fast, tri_fast, bi_fast)
}
library(dplyr)
library(ggplot2)
alpha <- 0.4
words <-"I eat ice"
bi_fast <- readRDS("en_US/bi_words_fast.rds")
tri_fast <- readRDS("en_US/tri_words_fast.rds")
quad_fast <- readRDS("en_US/quad_words_fast.rds")
prediction_algo <- function(input, alpha, quadragrams, trigrams, bigrams){
list_words <- unlist(strsplit(input, " "))
n <- length(list_words)
if(n>3){
words <- tail(words, 3)
prediction <- stupidBO(list_words, alpha, quadragrams, trigrams, bigrams)
prediction
}
else{
prediction <- stupidBO(list_words, alpha, quadragrams, trigrams, bigrams)
prediction
}
}
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(nrow(top_predictions) == 0){
if(len == 1){
top_predictions <- tibble(word = "and", score = alpha^iteration)
}
else{
backoff_ngram <- text_to_predict[-1]
stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
}
top_predictions
}
prediction_algo(words, alpha, quad_fast, tri_fast, bi_fast)
words <-"I want to eat"
prediction_algo(words, alpha, quad_fast, tri_fast, bi_fast)
words <-"I want to eat and"
prediction_algo(words, alpha, quad_fast, tri_fast, bi_fast)
words <-"I want to"
prediction_algo(words, alpha, quad_fast, tri_fast, bi_fast)
quad_fast
quad_fast %>% filter(word1 == list_words2[1],
word2 == list_words2[2],word3 == list_words2[3])
quad_fast %>% filter(word1 == list_words2[2],word2 == list_words2[3])
tri_fast %>% filter(word1 == list_words2[2],word2 == list_words2[3])
bi_fast %>% filter(word1 == list_words2[3])
list_words2[-1]
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(nrow(top_predictions) == 0){
if(len == 1){
top_predictions <- tibble(word = "and", score = alpha^iteration)
}
else{
backoff_ngram <- text_to_predict[-1]
stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
}
top_predictions
}
stupidBO(list_words2, alpha, quad_fast, tri_fast, bi_fast)
stupidBO(list_words2, alpha, quad_fast, tri_fast, bi_fast)
bi_fast %>% filter(word1 == list_words2[3])
as <-tri_fast %>% filter(word1 == list_words2[2],word2 == list_words2[3])
nrow(as)
stupidBO(list("ice"), alpha, quad_fast, tri_fast, bi_fast)
stupidBO(list("eat, ice"), alpha, quad_fast, tri_fast, bi_fast)
words3 <- unlist(strsplit("eat ice", " "))
stupidBO(words3, alpha, quad_fast, tri_fast, bi_fast)
words3
words3[-1]
stupidBO(words3[-1], alpha, quad_fast, tri_fast, bi_fast)
length(words3)
stupidBO(list_words2, alpha, quad_fast, tri_fast, bi_fast)
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(nrow(top_predictions) == 0){
backoff_ngram <- text_to_predict[-1]
stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
top_predictions
}
stupidBO(list_words2, alpha, quad_fast, tri_fast, bi_fast)
stupidBO(words3, alpha, quad_fast, tri_fast, bi_fast)
debug(stupidBO(words3, alpha, quad_fast, tri_fast, bi_fast))
debug(stupidBO)
stupidBO(words3, alpha, quad_fast, tri_fast, bi_fast)
len
len
top_predictions
rm(list = ls())
library(dplyr)
library(ggplot2)
alpha <- 0.4
words <-"I eat ice"
bi_fast <- readRDS("en_US/bi_words_fast.rds")
tri_fast <- readRDS("en_US/tri_words_fast.rds")
quad_fast <- readRDS("en_US/quad_words_fast.rds")
prediction_algo <- function(input, alpha, quadragrams, trigrams, bigrams){
list_words <- unlist(strsplit(input, " "))
n <- length(list_words)
if(n>3){
words <- tail(words, 3)
prediction <- stupidBO(list_words, alpha, quadragrams, trigrams, bigrams)
prediction
}
else{
prediction <- stupidBO(list_words, alpha, quadragrams, trigrams, bigrams)
prediction
}
}
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(nrow(top_predictions) == 0){
backoff_ngram <- text_to_predict[-1]
stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
top_predictions
}
debug(stupidBO)
stupidBO(unlist(strsplit("i eat ice", " ")), alpha, quad_fast, tri_fast, bi_fast)
new_alpha
text_to_predict
debug(stupidBO)
stupidBO(unlist(strsplit("i eat ice", " ")), alpha, quad_fast, tri_fast, bi_fast)
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(nrow(top_predictions) == 0){
backoff_ngram <- text_to_predict[-1]
top_predictions <- stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
top_predictions
}
stupidBO(unlist(strsplit("i eat ice", " ")), alpha, quad_fast, tri_fast, bi_fast)
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(nrow(top_predictions) == 0){
if(len == 1){
top_predictions <- tibble(word = "and", score = alpha^iteration)
}else{
backoff_ngram <- text_to_predict[-1]
top_predictions <- stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
}
top_predictions
}
stupidBO(unlist(strsplit("i eat ice", " ")), alpha, quad_fast, tri_fast, bi_fast)
shiny::runApp('PredictR')
runApp()
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
library(knitr)
rmdfiles <- c("app_data/PredictRmd.rmd")
sapply(rmdfiles, knit, quiet = T)
library(knitr)
rmdfiles <- c("app_data/PredictRmd.Rmd")
sapply(rmdfiles, knit, quiet = T)
rmdfiles <- c("app_data/PredictRmd.Rmd")
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp()
runApp('PredictR')
runApp()
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp()
runApp('PredictR')
runApp()
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
istwords <- unlist(strsplit("strinput()[[1]]"ola ke ase, " "))
istwords <- unlist(strsplit("ola ke ase", " "))
typeof(istwords)
istwords <- (strsplit("ola ke ase", " ")
istwords <- strsplit("ola ke ase", " ")
istwords <- strsplit("ola ke ase", " ")
typeof(istwords)
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp()
runApp('PredictR')
runApp()
runApp('PredictR')
runApp()
runApp('PredictR')
runApp()
runApp('PredictR')
runApp('PredictR')
runApp()
runApp('PredictR')
shiny::runApp('PredictR')
runApp()
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
lista <- unlist(strsplit("i eat ice", " "))
stupidBO(lista, 0.4, quad_fast, tri_fast, bi_fast)
datt <- stupidBO(lista, 0.4, quad_fast, tri_fast, bi_fast)
ggplot(data = datt, aes(x= word, y = score)) + geom_bar(stat='identity',aes(fill =score))+  xlab(NULL) + coord_flip()
ggplot(data = datt, aes(x= reorder(word, -score), y = score) + geom_bar(stat='identity',aes(fill =score))+  xlab(NULL) + coord_flip()
)
ggplot(data = datt, aes(x= reorder(word, -score), y = score) + geom_bar(stat='identity',aes(fill =score))+  xlab(NULL) + coord_flip()
a
ggplot(data = datt, aes(x= word, y = score)) + geom_bar(stat='identity',aes(fill =score))+  xlab(NULL) + coord_flip()
ggplot(data = datt, aes(x= reorder(word, -n), y = score) + geom_bar(stat='identity',aes(fill =score))+  xlab(NULL) + coord_flip()
ñ
ggplot(data = datt, aes(x= reorder(word, -score), y = score)) + geom_bar(stat='identity',aes(fill =score))+  xlab(NULL) + coord_flip()
ggplot(data = datt, aes(x= reorder(word, score), y = score)) + geom_bar(stat='identity',aes(fill =score))+  xlab(NULL) + coord_flip()
datt
datt$word
datt$word[1]
datt$word[[1]]
typeof(datt$word[1])
typeof(datt$word[[1]])
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
?updateNavbarPage
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
runApp('PredictR')
B
b
list_wordz <- unlist(strsplit("I EAT ICE", " "))
list_wordz
tolower(list_wordz)
gsub("[^[:alpha:][:space:]]*", "", list_wordz)
list_wordz <- unlist(strsplit("I EAT ICE.", " "))
list_wordz
tolower(list_wordz)
gsub("[^[:alpha:][:space:]]*", "", list_wordz)
list_words <- tolower(list_words)
n <- length(list_words)
library(dplyr)
library(ggplot2)
alpha <- 0.4
bi_fast <- readRDS("app_data/bi_words_fast.rds")
tri_fast <- readRDS("app_data/tri_words_fast.rds")
quad_fast <- readRDS("app_data/quad_words_fast.rds")
prediction_algo <- function(input, alpha, quadragrams, trigrams, bigrams){
list_words <- unlist(strsplit(input, " "))
list_words <- gsub("[^[:alpha:][:space:]]*", "", list_words)
list_words <- tolower(list_words)
n <- length(list_words)
if(n>3){
words <- tail(words, 3)
prediction <- stupidBO(list_words, alpha, quadragrams, trigrams, bigrams)
prediction
}
else{
prediction <- stupidBO(list_words, alpha, quadragrams, trigrams, bigrams)
prediction
}
}
stupidBO <- function(text_to_predict, alpha, quadragrams, trigrams, bigrams, iteration = 0){
new_alpha <- alpha^iteration
len <- length(text_to_predict)
if (len == 3){
top_predictions <- quadragrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2],word3 == text_to_predict[3]) %>%
head() %>% select(word4, n) %>% mutate(word= word4, score =new_alpha *n/sum(n))
}
if(len == 2){
top_predictions <- trigrams %>% filter(word1 == text_to_predict[1],
word2 == text_to_predict[2]) %>%
head() %>% select(word3, n) %>% mutate(word= word3,score =new_alpha * n/sum(n))
}
if(len == 1){
top_predictions <- bigrams %>% filter(word1 == text_to_predict[1]) %>%
head() %>% select(word2, n) %>% mutate(word= word2, score =new_alpha * n/sum(n))
}
if(nrow(top_predictions) == 0){
if(len == 1){
top_predictions <- tibble(word = "and", score = alpha^iteration)
}else{
backoff_ngram <- text_to_predict[-1]
top_predictions <- stupidBO(backoff_ngram, alpha, quadragrams, trigrams, bigrams, iteration = iteration + 1)
}
}
top_predictions
}
runApp('PredictR')
R.version.string
install.packages("installR")
install.packages("installr")
library(installr)
updateR()
